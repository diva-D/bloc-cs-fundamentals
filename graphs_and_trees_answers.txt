#### Exercises

> 1. What is a binary tree and what makes it unique to other trees?

A: A binary tree is a a hierarchal tree structure where each node in the tree can contain up to two child Nodes (left and right). It's unique in that it only has two children and thus only two possible options to consider.


> 2. What is a heuristic?

A: It's basically a 'best guess' engineers use to cut down on possible processing time. It's based essentially on common sense. An example being when trying to find the shortest path between two points, choosing a node that's closer to the end node will, in most cases, indicate the shortest path. 


> 3. What is another problem besides the shortest-path problem that requires the use of heuristics?

A: Antivirus software. It's impossible to code for every possible variation of a virus so antivirus software will  look for common code and/or common behaviors. This means it can identify malicious code before it's database can be updated to include the new virus.


> 4. What is the difference between a depth-first search and a breadth-first search?

A: A depth-first seach will travel down an entire branch and, if the node is not found, travel back up to the root node and look down another branch.

A breadth-first search will search by 'rows'. Meaning as you travel further down the branches you will have to move further back up to the parent node when look at the other row nodes, before moving down to the next 'row'.


> 5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.

A: 
- Undirected: you can travel any direction between nodes.
- A-cyclic: Nodes do not form a loop, so they will have end points.
- Unweighted: There is no cost assoicated to traveling between nodes.


> 6. What kind of graph is a binary search tree?

A: Directed, A-cyclic, Unweighted


#### Programming Questions

> 1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

A: Given how binary search trees are structured, with nodes to the left LESS than the node and nodes to the right MORE than the node, we can use the value to determine which subtree to look down. We can use a recurisve function that checks if the value is greater or less than the current node and then move to the left or right subtree. If we find the value we return true, else false. 

CODE:

function containsValue(root, value) {
    if (root.value === value) {
        return true;
    } else if (root.value === null) {
        return false
    } else if (value > root.value) {
        return containsValue(root.right, value);
    } else if (value < root.value) {
        return containsValue(root.left, value);
    }
}


> 2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

A: To solve this I need to find the lowest common parent node. I can do this by seeing if both nodes are less than or greater than the current parent node. If not I move left or right to the next 'parent' node. I continue this until there is a split, with one higher and one lower than the parent. From there I calculate the distance from the parent for each node. I add those distances together to get the total distance from node 1 and node 2.

CODE:

function distanceBetweenNodes(root, n1, n2) {
    const parentNode = findParentNode(root, n1, n2);

    const distance1 = findValueDistance(parentNode, n1);
    const distance2 = findValueDistance(parentNode, n2);
    const totalDistance = distance1 + distance2;

    return totalDistance;   
}

function findParentNode(parent, n1, n2) {
    if (n1.value && n2.value < parent.value) {
        return findParentNode(parent.left, n1, n2);
    } else if (n1.value && n2.value > parent.value) {
        return findParentNode(parent.right, n1, n2);
    } else {
        return parent;
    }
}

function findValueDistance(root, node, distance = 0) {
    let distance = distance;
    if (root.value === node.value) {
        return distance;
    } else if (node.vale < root.value) {
        distance++;
        return findValue(root.left, node, distance);
    } else {
        distance++;
        return findValue(root.right, node, distance);
    }
}