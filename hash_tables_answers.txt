#### Exercises

> 1. What is a hash table?

A: It's an associative array where values are stored using a key-value pair. 


> 2. What is hashing?

A: From a key (typically a string) we use a hashing function to create a hash code (a fixed-length integer) which is then converted to an array index.


> 3. How does a hash table store data?

A: After a key is hashed to a hash code, we convert that to an array index. We then store our value at this index.


> 4. How are hash tables and objects different?

A: The main difference is in their primary uses. A hash table is used to store lots of data of unknown length that contains similar data. An object is used to store information, typically of different types (number, string, boolean, object). A hash table is optimal for large datasets given the O(1) lookup capabilities of using hashing.


> 5. Determine whether you would use a hash table or an object to store each of the following pieces of data:

> 5.1 A list of pets and their unique names.

A: Hash table. Collection of similiar data of unknown length.


> 5.2 The name, age, and the birthday of your best friend.

A: Object. Different types of data tied to one thing.


> 5.3 The name and location of every company in a given city.

A: Hash table. Lots of similiar data.


> 5.4 All of the books checked out from a library by a particular individual.

A: Hash table. Single identifier and similar data.


> 5.5 The primary and secondary phone numbers for a contact.

A: Depends on how many contacts. For just one an object is sufficient. For a huge list of contacts a hash table would provide better performance.


> 6. Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.

A: 

// hash table implementation inspired by https://gist.github.com/alexhawkins/f6329420f40e5cafa0a4

class CustomerTable {
    constructor() {
        this.limit = 1000;
        this.storage = [];
    }

    insert(phoneNumber, name, address) {
        let index = this.hashFunc(phoneNumber, this.limit);
        let bucket = this.storage[index];

        if (!bucket) {
            bucket = [];
            this.storage[index] = bucket;
        }

        bucket.push({'phoneNumber': phoneNumber, 'name': name, 'address': address});
    }

    retrieve(phoneNumber) {
        let index = this.hashFunc(phoneNumber, this.limit);
        let bucket = this.storage[index];

        if (!bucket) {
            return null;
        }

        for (let i = 0; i < bucket.length; i++) {
            let tuple = bucket[i];
            if (tuple.phoneNumber === phoneNumber) {
                return tuple;
            }
        }

        return null;
    }

    hashFunc(phoneNumber, max) {
        let hash = 0;
        for (let i = 0; i < numberString.length; i++) {
            let letter = numberString[i];
            hash = (hash << 5) + letter.charCodeAt(0);
            hash = (hash & hash) % max;
        }
        return hash;
    }
}


> 7. Build a system that allows a store owner to track their store's inventory using a hash table for storage.

A: 

class InventoryTable {
    constructor() {
        this.limit = 1000;
        this.storage = [];
    }

    insert(key, name, stock) {
        let index = this.hashFunc(key, this.limit);
        let bucket = this.storage[index];

        if (!bucket) {
            bucket = [];
            this.storage[index] = bucket;
        }

        bucket.push({'key': key, 'name': name, 'stock': stock});
    }

    retrieve(key) {
        let index = this.hashFunc(key, this.limit);
        let bucket = this.storage[index];

        if (!bucket) {
            return null;
        }

        for (let i = 0; i < bucket.length; i++) {
            let tuple = bucket[i];
            if (tuple.key === key) {
                return tuple;
            }
        }

        return null;
    }

    purchase(key, amount) {
        let item = this.retrieve(key);
        item.stock += amount;

        return item;
    }

    sell(key, amount) {
        let item = this.retrieve(key);
        item.stock -= amount;
        
        return item;
    }

    hashFunc(key, max) {
        let hash = 0;
        for (let i = 0; i < key.length; i++) {
            let letter = key[i];
            hash = (hash << 5) + letter.charCodeAt(0);
            hash = (hash & hash) % max;
        }
        return hash;
    }
}

> 8. Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.

A: 

class NewspaperTable {
    constructor() {
        this.limit = 100000;
        this.storage = [];
    }

    insert(publisher, date, data) {
        let index = this.hashFunc(publisher, date, this.limit);
        let bucket = this.storage[index];

        if (!bucket) {
            bucket = [];
            this.storage[index] = bucket;
        }

        bucket.push({'publisher': publisher, 'date': date, 'data': data});
    }

    retrieve(publisher, date) {
        let index = this.hashFunc(publisher, date, this.limit);
        let bucket = this.storage[index];

        if (!bucket) {
            return null;
        }

        for (let i = 0; i < bucket.length; i++) {
            let tuple = bucket[i];
            if (tuple.publisher === publisher && tuple.date === date) {
                return tuple;
            }
        }

        return null;
    }

    hashFunc(publisher, date, max) {
        let combinedString = publisher + date;
        let hash = 0;
        for (let i = 0; i < combinedString.length; i++) {
            let letter = combinedString[i];
            hash = (hash << 5) + letter.charCodeAt(0);
            hash = (hash & hash) % max;
        }
        return hash;
    }
}