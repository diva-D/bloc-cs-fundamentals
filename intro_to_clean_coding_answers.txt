#### Questions

> 1. In your own words, explain what clean code is and why it is important.

A: Clean code is the process of making your code readable (easy to be understood by yourself and other programmers), logical (follows a series of steps that make sense), and using best practice (DRY, single responsibility, and self-documenting). This ensures your code performs well and is easy to understand and maintain.


> 2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

A: Spaceships! As past launch disasters have shown that if a single tile is not placed perfectly it can cause the whole ship to break, imagine how much bad code can wreak havoc on a mission. It's imperative that the code is precisely written and easy to maintain and adapt. This fasinating article (https://www.fastcompany.com/28121/they-write-right-stuff) details how the team behind NASA's code has some of the fewest errors in any industry, because of how well they write the code.


> 3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

A: No. 
1) The comments add nothing to the code (they just describe what is self-evident in the code) and make it very hard to read properly.

2) The function name and parameters are not desciptive. The function name should explain what the function does and start with a verb. The parameters should describe what they are instead of just "x, y" which says nothing.

3) You can extract a method out of this code (temperature conversion) so that it has a single responsibility (print the temperature). This would make the code easier to read and maintain.

REFACTOR:

FUNCTION printConvertedTemperature(temperature, unit)
    CALL convertTemperature WITH temperature, unit RETURNING convertedTemperature
    PRINT convertedTemperature
END FUNCTION

FUNCTION convertTemperature(temperature, unit)
    IF unit === 'F' THEN
        SET convertedTemperature = (temperature - 32) * (5/9)
    ELSEIF unit === 'C' THEN
        SET convertedTemperature (temperature * 1.8) + 32.0
    ELSE
        // Error catching for invalid units
        RETURN "Not a valid unit"
    END IF
    RETURN convertedTemperature
END FUNCTION


> 4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

A: It's pretty good. Really the only thing I might change is the function name so it doesn't abbreivate calculate but that seems to be a fairly standard practice so it's not hard to understand.


> 5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

> 5a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

A: 

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   
    SET total to subTotal * discountRate + (subTotal * tax)
   
    PRINT "Your total due is: " + total

    CALL processPayment WITH paymentType, total

END FUNCTION

FUNCTION processPayment(paymentType, total)

    IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - total
    
    ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + total
    
    END IF

END FUNCTION

> 5b. The following function checks out a book if there are no issues with the guest's account.

A:

FUNCTION checkoutBook(book, guest)
    IF isAbleToCheckout(guest) THEN
        APPEND book to guest.books
        SET book.status to "Checked Out"
        PRINT "Your books have been issued."
    ELSE
        PRINT "Unable to check out book."
    END IF
END FUNCTION

FUNCTION isAbleToCheckout(guest)
    RETURN ( guest.accountActive AND NOT(guest.hasOverdueBooks) AND (guest.outstandingFees === 0) )
END FUNCTION

> 5c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

A:

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 END


> 6. Square - Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

A:

function findPerfectSquare(numbers) {
    const sum = numbers.reduce((total, item) => total + item);
    const squareRoot = Math.sqrt(sum);
    // Perfect squares are integers
    if ( isInteger(squareRoot) ) {
        return squareRoot;
    } else {
        return sum;
    }
}

function isInteger(number) {
    return number % 1 === 0;
}


> 7. Duplicate - Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

A:

function hasDuplicates(integers) {
    /*
    Sort array so identical integers will be next to each other and we avoid looping through the entire array each time
    */
    
    const sortedIntegers = integers.sort()
    
    for (let i = 0; i < sortedIntegers.length; i++) {
        if ( sortedIntegers[i] === sortedIntegers[i + 1]) {
            return true
        }
    }
    
    return false
}


> 8. Anagram - An anagram is a word, phrase, or name formed by rearranging the letters of another word. For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity. Hint: Your first task will be to convert the strings to arrays.

A:

function isAnnagram(stringOne, stringTwo) {
    return sortString(stringOne) === sortString(stringTwo);
}

function sortString(string) {
    /* 
    To sort a string you have to convert to an array, sort it, then convert it back to a string
    */

    const arrayFromString = string.split('');
    const sortArray = arrayFromString.sort();
    const sortedString = sortArray.join('');

    return sortedString;
}