#### Exercises

> 1. What are some pros and cons of using linked lists instead of arrays?

A: 

**PROS**
- Dynamically creates each node, meaning there is never empty placeholders taking up memory.
- Because each node is independant it uses any available memory location to be stored.
- These features allow linked lists to grow to big sizes compared to arrays

**CONS**
- Very inefficent to access an element in the list. Elements have to be searched from the start of the list in order. Arrays are indexed and you can simply search by the element's index instead of searching in order.


> 2. Come up with a real world example of a linked list.

A: A music playlist. Once a song finishes it is linked to the next song to start playing.


#### Programming Questions

> 1. The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

A:

BUG: It resets which node is the "head". The line it does it is: `SET current to head`. Only the first node should be the head node as that's our placeholder for where the list begins. We need to set each new node as 'current' and not 'head'.

REFACTOR:

FUNCTION push(element)
    CREATE node
    SET node.value TO element
    SET node.next TO null

    IF the head node does not exist THEN
        SET head to node
        SET current to head
    ELSE
        SET current.next to node
        SET current to node
    END IF
END FUNCTION

> 2. Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

A:

function removedDuplicates(headNode) {
    let uniques = [];
    let previousNode;
    let currentNode = headNode;
    while (currentNode !== null ) {
        if (uniques.indexOf(currentNode) === -1 ) {
            uniques.push(currentNode);
            previousNode = currentNode;
            currentNode = currentNode.next;
        } else {
            currentNode = currentNode.next;
            previousNode.next = currentNode;
        }
    }
}

> 3. Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a

A:

function reverseList(headNode) {
    let currentNode = headNode;
    let previousNode;
    let nextNode;
    while (currentNode.next !== null) {  
        if (currentNode === headNode) {
            nextNode = currentNode.next;
            previousNode = currentNode;
            currentNode.next = null;
            currentNode = nextNode;
        } else {
            nextNode = currentNode.next;
            currentNode.next = previousNode;
            previousNode = currentNode;
            currentNode = nextNode;
        }
    }
}