#### Questions

> 1. A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

> a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

A: let line = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

> b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.

A: line.push("Mary");

> c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).

A: line.indexOf("Josh");

> d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

A: 

if (line.indexOf("Emily") === -1) {
    return "Person not in line!";
} else {
    return line.indexOf("Emily");
}

> e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

A: line.splice(line.indexOf("Ava"), 0, "Melissa");

> f) If Patrick wants to leave the line, how would you delete him from the array?

A: line.splice(line.indexOf("Patrick"),1);


> 2. Provide another real-world example that you can model using a data structure.

A: Inventory in a bike shop. You could use an Array combined with Object data structure to keep track of all the items in the shop. Each bike (object) would be part of the inventory array. The items would have object properties such as purchased price, sale price, weight, size, color, etc. 


> 3. How would your data structure allow developers to access and manipulate the data?

A: When the shop purchases a new bike to sell it would be added to the inventory array and it's properties added to the new object. And when sold the object would be removed from the inventory array. Developers could filter the array by object properties - e.g. only show bikes that are black, or show kid's bikes. You could sum the total inventory value by looping through the array and adding each bike's purchased price value to a total.

